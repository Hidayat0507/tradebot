import { NextRequest } from 'next/server';
import { ApiError } from '@/app/api/_middleware/api-handler';
import { 
  handleApiError,
  successResponse
} from '@/app/api/_middleware/api-handler';
import { 
  validateWebhookAlert,
  processWebhookAlert
} from '@/app/api/_middleware/webhook';
import { createClient, createServiceClient } from '@/utils/supabase/server';
import { logger } from '@/lib/logging';

export async function POST(request: NextRequest) {
  try {
    // Parse and validate the alert
    const data = await request.json();
    const alert = validateWebhookAlert(data);

    // Initialize Supabase clients
    const supabase = await createClient(request);
    const serviceClient = createServiceClient();

    // Get bot with credentials and verify webhook secret
    const { data: bot, error } = await serviceClient
      .from('bots')
      .select('id, exchange, api_key, api_secret, user_id, webhook_secret, name, order_size')
      .eq('id', alert.bot_id)
      .single();

    if (error || !bot) {
      logger.error('Bot not found', { botId: alert.bot_id, error });
      throw new ApiError('Bot not found', 404);
    }

    // Verify webhook secret
    if (data.secret !== bot.webhook_secret) {
      logger.warn('Invalid webhook secret', { botId: alert.bot_id });
      throw new ApiError('Invalid webhook secret', 401);
    }

    // Process the webhook alert
    const trade = await processWebhookAlert(alert, bot, serviceClient);

    return successResponse({ success: true, trade });
  } catch (error) {
    logger.error('Failed to process webhook', { error });
    return handleApiError(error);
  }
}
